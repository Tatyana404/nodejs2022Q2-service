openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: /

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        password:
          type: string
          example: 'testPassword'
        version:
          type: number
          example: 1
        createdAt:
          type: number
          example: 1658072179716
        updatedAt:
          type: number
          example: 1658072179716
      required:
        - id
        - login
        - password
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
        - grammy
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
        - year
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - duration
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
  # responses:
  #   UnauthorizedError:
  #     description: Access token is missing or invalid
  # securitySchemes:
  #   bearerAuth:
  #     type: http
  #     scheme: bearer
  #     bearerFormat: JWT

# security:
#   - bearerAuth: []

paths:
  # /login:
  #   post:
  #     tags:
  #       - Login
  #     security: []
  #     summary: Login
  #     description: Logins a user and returns a JWT-token
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             title: example
  #             properties:
  #               login:
  #                 type: string
  #                 description: Username
  #               password:
  #                 type: string
  #                 description: Password
  #             required:
  #               - user
  #               - login
  #     responses:
  #       200:
  #         description: Successful login.
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 token:
  #                   type: string
  #               description: JWT Token
  #       403:
  #         description: Incorrect login or password
  # /signup:
  #   post:
  #     tags:
  #       - Signup
  #     security: [ ]
  #     summary: Signup
  #     description: Signup a user
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             title: example
  #             properties:
  #               login:
  #                 type: string
  #                 minLength: 3
  #                 maxLength: 255
  #                 description: Username
  #               password:
  #                 type: string
  #                 format: password
  #                 pattern: ^[a-zA-Z0-9]{3,30}
  #                 description: Password
  #             required:
  #               - login
  #               - password
  #     responses:
  #       204:
  #         description: Successful signup
  #       400:
  #         description: Bad request
  #       409:
  #         description: Conflict. Login already exists
  /user:
    get:
      tags:
        - Users
      summary: Get all users
      description: Get all users
      responses:
        200:
          # description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: User login
                password:
                  type: string
                  description: User password
              required:
                - login
                - password
      responses:
        201:
          # description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Body does not contain required fields
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
  /user/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get one user by id
      description: Get one user by id
      responses:
        200:
          # description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: User id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
    put:
      tags:
        - Users
      summary: Update user password by id
      description: Update user password by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                oldPassword:
                  type: string
                  description: Old user password
                newPassword:
                  type: string
                  description: New user password
              required:
                - oldPassword
                - newPassword
      responses:
        200:
          # description: The user has been updated.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  login:
                    type: string
                    example: TestUser
                  version:
                    type: integer
                    example: 2
                  createdAt:
                    type: integer
                    example: 1658072179716
                  updatedAt:
                    type: integer
                    example: 1658075994933
        400:
          description: User id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        403:
          description: Old password is not correct
        404:
          description: User not found
    delete:
      tags:
        - Users
      summary: Remove user by id
      description: Remove user by id
      responses:
        204:
          description: ''
        400:
          description: User id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /track:
    get:
      tags:
        - Tracks
      summary: Get all tracks
      description: Get all tracks
      responses:
        200:
          # description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Tracks
      summary: Create a new track
      description: Create a new track
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                artistId:
                  type: string
                  format: uuid
                albumId:
                  type: string
                  format: uuid
                duration:
                  type: integer
                  description: In seconds
              required:
                - name
                - duration
      responses:
        201:
          # description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Body does not contain required fields
        422:
          description: Artist/Album not found
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
  /track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Tracks
      summary: Get one track by id
      description: Get one track by id
      responses:
        200:
          # description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        400:
          description: Track id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track not found
    put:
      tags:
        - Tracks
      summary: Update track by id
      description: Update track by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  example: Bohemian Rhapsody
                artistId:
                  type: string
                  format: uuid
                  nullable: true
                albumId:
                  type: string
                  format: uuid
                  nullable: true
                duration:
                  type: integer
                  description: In seconds
                  example: 355
      responses:
        200:
          # description: The track has been updated.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                    example: Bohemian Rhapsody
                  artistId:
                    type: string
                    format: uuid
                    nullable: true
                  albumId:
                    type: string
                    format: uuid
                    nullable: true
                  duration:
                    type: integer
                    description: In seconds
                    example: 355
        400:
          description: Track id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track not found
    delete:
      tags:
        - Tracks
      summary: Remove track by id
      description: Remove track by id
      responses:
        204:
          description: ''
        400:
          description: Track id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track not found
  /album:
    get:
      tags:
        - Albums
      summary: Get all albums
      description: Get all albums
      responses:
        200:
          # description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Albums
      summary: Create a new album
      description: Create a new album
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
              required:
                - name
                - year
      responses:
        201:
          # description: Almub is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Body does not contain required fields
        422:
          description: Artist not found
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
  /album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Albums
      summary: Get one album by id
      description: Get one album by id
      responses:
        200:
          # description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Album id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album not found
    put:
      tags:
        - Albums
      summary: Update album by id
      description: Update album by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                year:
                  type: integer
                artistId:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        200:
          # description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        400:
          description: Album id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album not found
    delete:
      tags:
        - Albums
      summary: Remove album by id
      description: Remove album by id
      responses:
        204:
          description: ''
        400:
          description: Album id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album not found
  /artist:
    get:
      tags:
        - Artists
      summary: Get all artists
      description: Get all artists
      responses:
        200:
          # description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Artists
      summary: Create a new artist
      description: Create a new artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
              required:
                - name
                - grammy
      responses:
        201:
          # description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Body does not contain required fields
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
  /artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Artists
      summary: Get one artist by id
      description: Get one artist by id
      responses:
        200:
          # description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Artist id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist not found
    put:
      tags:
        - Artists
      summary: Update artist by id
      description: Update artist by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                grammy:
                  type: boolean
      responses:
        200:
          # description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        400:
          description: Artist id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist not found
    delete:
      tags:
        - Artists
      summary: Remove artist by id
      description: Remove artist by id
      responses:
        204:
          description: ''
        400:
          description: Artist id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist not found
  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      description: Get all favorites
      responses:
        200:
          # description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add track to the favorites
      description: Add track to the favorites
      responses:
        201:
          description: ''
        400:
          description: Track id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Track not found
    delete:
      tags:
        - Favorites
      summary: Remove track from favorites
      description: Remove track from favorites
      responses:
        204:
          description: ''
        400:
          description: Track id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Track not found
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add album to the favorites
      description: Add album to the favorites
      responses:
        201:
          description: ''
        400:
          description: Album id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Album not found
    delete:
      tags:
        - Favorites
      summary: Remove album from favorites
      description: Remove album from favorites
      responses:
        204:
          description: ''
        400:
          description: Album id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Album not found
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Favorites
      summary: Add artist to the favorites
      description: Add artist to the favorites
      responses:
        201:
          description: ''
        400:
          description: Artist id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Artist not found
    delete:
      tags:
        - Favorites
      summary: Remove artist from favorites
      description: Remove artist from favorites
      responses:
        204:
          description: ''
        400:
          description: Artist id invalid
        # 401:
        #   $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Artist not found